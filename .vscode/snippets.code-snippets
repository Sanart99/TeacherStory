{
	"General: Get LDPDO": {
		"scope": "php",
		"prefix": "getLDPDO",
		"body": [
			"\\$${1:pdo} = \\$${2:context}->getLDPDO();"
		],
		"description": "Get PDO connections."
	},
	"General: Get LDRedis": {
		"scope": "php",
		"prefix": "getLDRedis",
		"body": [
			"\\$${1:redis} = \\$${2:context}->getLDRedis();"
		],
		"description": "Get Redis connections."
	},
	"GraphQL: New ObjectType": {
		"scope": "php",
		"prefix": "objT",
		"body": [
			"class $1Type extends ${2:Object}Type {",
			"\tpublic function __construct(array \\$config2 = null) {",
			"\t\t\\$config = [",
			"\t\t\t$0",
			"\t\t];",
			"\t\tparent::__construct(\\$config2 == null ? \\$config : array_merge_recursive_distinct(\\$config,\\$config2));",
			"\t}",
			"}"
		],
		"description": "Creates a new GraphQL ObjectType."
	},
	"GraphQL: New ObjectType field": {
		"scope": "php",
		"prefix": "objTField",
		"body": [
			"'$1' => [",
			"\t'type' => fn() => $2,",
			"\t'resolve' => fn(\\$o,\\$args,\\$context,\\$ri) => self::process(\\$context, \\$ri, \\$o, function() use(\\$context) {",
			"\t\t$0",
			"\t}),",
			"\t'complexity' => fn(\\$childN) => \\$childN$3",
			"]$4"
		],
		"description": "Creates a new GraphQL ObjectType field."
	},
	"GraphQL: New ObjectType field (min)": {
		"scope": "php",
		"prefix": "objTFieldMin",
		"body": [
			"'$1' => [",
			"\t'type' => fn() => $2,",
			"\t'resolve' => fn(\\$o) => \\$o$0,",
			"\t'complexity' => fn(\\$childN) => \\$childN$3",
			"]$4"
		],
		"description": "Creates a new GraphQL ObjectType field."
	},
	"GraphQL: New ObjectType process function": {
		"scope": "php",
		"prefix": "objTProcess",
		"body": [
			"public static function process(Context \\$context, ResolveInfo \\$ri, mixed \\$o, callable \\$f) {",
			"\t$0return \\$f(\\$o);",
			"}"
		],
		"description": "Creates a new GraphQL ObjectType field."
	},
	"GraphQL: New MutationType field": {
		"scope": "php",
		"prefix": "mutTField",
		"body": [
			"'$1' => [",
			"\t'type' => fn() => Type::nonNull(Types::SimpleOperation()),",
			"\t'resolve' => function (\\$o,\\$args,\\$context) {",
			"\t\t$0",
			"\t},",
			"\t'complexity' => fn(\\$childN) => \\$childN + self::\\$processComplexity",
			"]$2"
		],
		"description": "Creates a new GraphQL ObjectType field."
	},
	"Multiline Comment": {
		"scope": "php",
		"prefix": "/**",
		"body": [
			"/**",
			" * $0",
			" **/"
		],
		"description": "Custom multiline comment style."
	},
	"Cache: store function": {
		"scope": "php",
		"prefix": "f_store",
		"body": [
			"public static function store$1(LDRedis \\$redis, $2, \\$ttl=$3) {",
			"\t\\$key = \"$4\";",
			"\tif (!\\$redis->set(\\$key,json_encode($5),['EX' => \\$ttl])) self::storageError('redis', \"Couldn't store '\\$key'.\");",
			"}"
		]
	},
	"Cache: forget function": {
		"scope": "php",
		"prefix": "f_forget",
		"body": [
			"public static function forget$1(LDRedis \\$redis, $2) {",
			"\t\\$redis->del(\"$3\");",
			"}"
		]
	},
	"Cache: prep function": {
		"scope": "php",
		"prefix": "f_prep",
		"body": [
			"public static function prep$1($2) {",
			"\tself::\\$aPrepared->add([DataType::$3,[$4]]);",
			"}",
			"",
			"public static function unprep$1($2) {",
			"\tself::\\$aPrepared->remove([DataType::$3,[$4]]);",
			"}"
		]
	},
	"Cache: get function": {
		"scope": "php",
		"prefix": "f_get",
		"body": [
			"public static function get$1(LDRedis \\$redis, $2) {",
			"\t\\$data = \\$redis->get(\"$3\");",
			"\tif (\\$data == null) return null;",
			"\telse return ['data' => json_decode(\\$data,true), 'metadata' => null];",
			"}"
		]
	},
	"Cache: prepOrGet function": {
		"scope": "php",
		"prefix": "f_prepOrGet",
		"body": [
			"public static function prepOrGet$1(LDRedis \\$redis, $2) {",
			"\t\\$v = self::get$1(\\$redis, $3);",
			"\tif (!is_array(\\$v)) self::prep$1($3);",
			"\treturn \\$v;",
			"}"
		]
	},
	"Cache: prep and get functions": {
		"scope": "php",
		"prefix": "f_fullPrepAndGet",
		"body": [
			"public static function prep$1($2) {",
			"\tself::\\$aPrepared->add([DataType::$3,[$4]]);",
			"}",
			"",
			"public static function unprep$1($2) {",
			"\tself::\\$aPrepared->remove([DataType::$3,[$4]]);",
			"}",
			"",
			"public static function get$1(LDRedis \\$redis, $2) {",
			"\t\\$data = \\$redis->get(\"$5\");",
			"\tif (\\$data == null) return null;",
			"\telse return ['data' => json_decode(\\$data,true), 'metadata' => null];",
			"}",
			"",
			"public static function prepOrGet$1(LDRedis \\$redis, $2) {",
			"\t\\$v = self::get$1(\\$redis,$4);",
			"\tif (!is_array(\\$v)) self::prep$1($4);",
			"\treturn \\$v;",
			"}$0"
		]
	},
	"Cache: M functions": {
		"scope": "php",
		"prefix": "f_MFunctions",
		"body": [
			"public static function store$1(LDRedis \\$redis, PaginationVals \\$pag, array \\$rows, $2, int \\$ttl=${6:60}) {",
			"\t\\$key = \"$5\";",
			"\tif (!\\$redis->set(\\$key,json_encode(\\$rows),\\$ttl)) self::storageError('redis', \"Couldn't store '\\$key'.\");",
			"}",
			"",
			"public static function forget$1(LDRedis \\$redis, PaginationVals \\$pag, $2) {",
			"\t\\$redis->del(\"$5\");",
			"}",
			"",
			"public static function prep$1(PaginationVals \\$pag, $2) {",
			"\tself::\\$aPreparedM->add([DataType::$3,$0[$4]]);",
			"}",
			"",
			"public static function unprep$1(PaginationVals \\$pag, $2) {",
			"\tself::\\$aPreparedM->remove([DataType::$3,$0[$4]]);",
			"}",
			"",
			"public static function get$1(LDRedis \\$redis, PaginationVals \\$pag, $2) {",
			"\t\\$data = \\$redis->get(\"$5\");",
			"\tif (\\$data == null) return null;",
			"\telse return json_decode(\\$data,true);",
			"}",
			"",
			"public static function prepOrGet$1(LDRedis \\$redis, PaginationVals \\$pag, $2) {",
			"\t\\$v = self::get$1(\\$redis,$4);",
			"\tif (!is_array(\\$v)) self::prep$1($4);",
			"\treturn \\$v;",
			"}"
		]
	},
	"Cache: exec function": {
		"scope": "php",
		"prefix": "f_exec",
		"body": [
			"private static function exec$1(LDPDO \\$pdo, LDRedis \\$redis) {",
			"\t// Fetch multiple",
			"\tforeach (self::\\$aDatas['$3M'] as \\$a) {",
			"\t\t$11",
			"",
			"\t\tDatabaseUtils::pagRequest(\\$pdo, '$4', ${5:'1=1'}, \\$pag, ${6:'id'},",
			"\t\t\tfn(&\\$row) => base64_encode($7),",
			"\t\t\tfn(&\\$s) => base64_decode(${8:\\$s}),",
			"\t\t\tfunction(\\$row) use(\\$redis) {",
			"\t\t\t\tself::unprep$2($9);",
			"\t\t\t\tself::store$2(\\$redis,\\$row['data']);",
			"\t\t\t},",
			"\t\t\tfunction(\\$rows) use(\\$redis,$10\\$pag) {",
			"\t\t\t\tself::unprep$1($10\\$pag);",
			"\t\t\t\tself::store$1(\\$redis,$10\\$pag,\\$rows);",
			"\t\t\t}",
			"\t\t);",
			"\t}",
			"\tself::\\$aDatas['$3M'] = [];",
			"",
			"\t// Fetch individual",
			"\tif (count(self::\\$aDatas['$3']) > 0) {",
			"\t\t\\$sqlWhere = '';",
			"\t\t\\$vals = [];",
			"\t\tforeach (self::\\$aDatas['$3'] as \\$a) {",
			"\t\t\t$12",
			"",
			"\t\t\tif (\\$sqlWhere != '') \\$sqlWhere .= ' OR ';",
			"\t\t\t\\$sqlWhere .= \"$14\";",
			"\t\t\tself::unprep$2($13);",
			"\t\t}",
			"\t\t\\$stmt = \\$pdo->prepare(\"SELECT * FROM $4 WHERE \\$sqlWhere\");",
			"\t\t\\$stmt->execute(\\$vals);",
			"\t\twhile (\\$row = \\$stmt->fetch()) self::store$2(\\$redis,\\$row);",
			"\t}",
			"\tself::\\$aDatas['$3'] = [];",
			"}"
		]
	},
	"File: exec function": {
		"scope": "php",
		"prefix": "fileinit_component",
		"body": [
			"namespace Components$2;",
			"",
			"use LDLib\\Utils\\Utils;",
			"",
			"class $1 {",
			"\tpublic static function getComponentJSClass(bool \\$withDefine=false) {",
			"\t\t\\$root = Utils::getRootLink();",
			"",
			"\t\t\\$js = <<<JAVASCRIPT",
			"\t\tclass $1 extends BaseElement {",
			"\t\t\tconstructor() {",
			"\t\t\t\tsuper();",
			"",
			"\t\t\t\tconst shadowRoot = this.attachShadow({ mode:\"open\" });",
			"\t\t\t\tshadowRoot.replaceChildren(...stringToNodes(",
			"\t\t\t\t`<link rel=\"stylesheet\" href=\"{\\$root}/styleReset.css\" type=\"text/css\">",
			"\t\t\t\t<style>",
			"",
			"\t\t\t\t</style>`",
			"\t\t\t\t));",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tJAVASCRIPT;",
			"\t\tif (\\$withDefine) {",
			"\t\t\t\\$js .= <<<JAVASCRIPT",
			"\t\t\tcustomElements.define(\"$3\", $1);",
			"",
			"\t\t\tJAVASCRIPT;",
			"\t\t}",
			"\t\treturn \\$js;",
			"\t}",
			"}"
		]
	}
}