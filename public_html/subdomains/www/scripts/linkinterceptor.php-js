<?php
namespace TeacherStory\Pages\WWW\Scripts;

use LDLib\Server\ServerContext;
use Swoole\Http\Request;
use Swoole\Http\Response;

class LinkInterceptor {
    private static ?string $c_hash = null;

    public static function getHash() {
        return self::$c_hash ??= hash('md5',self::getPage(withHash:false));
    }

    public static function getPage(?Request $request=null, ?Response $response=null, bool $withHash=true) {

        $response?->header('Content-Type','text/javascript');
        $v = <<<JAVASCRIPT
        class LinkInterceptor {
            static preProcesses = [];
            static midProcesses = [];
            static namesTaken = new Map();

            static addPreProcess(name,f,priority) {
                if (LinkInterceptor.namesTaken.get(name) == true) return false;
                LinkInterceptor.namesTaken.set(name,true);

                LinkInterceptor.preProcesses.push({name:name,f:f,priority:priority});
                LinkInterceptor.preProcesses.sort((a,b) => {
                    if (a.priority > b.priority) return -1;
                    if (a.priority < b.priority) return 1;
                    return 0;
                });
                return true;
            }

            static addMidProcess(name,f,priority,replace=true) {
                if (LinkInterceptor.namesTaken.get(name) == true) {
                    if (replace) {
                        for (const o of LinkInterceptor.midProcesses)
                            if (o.name == name) { LinkInterceptor.midProcesses.splice(LinkInterceptor.midProcesses.indexOf(o),1); break; }
                    } else return false;
                }
                LinkInterceptor.namesTaken.set(name,true);

                LinkInterceptor.midProcesses.push({name:name,f:f,priority:priority});
                LinkInterceptor.midProcesses.sort((a,b) => {
                    if (a.priority > b.priority) return -1;
                    if (a.priority < b.priority) return 1;
                    return 0;
                });
                return true;
            }
        }

        JAVASCRIPT;
        if ($withHash) $response?->header('ETag',self::getHash());
        return ($request != null && $response != null) ? ServerContext::applyContentEncoding($request,$response,$v) : $v;
    }
}
?>